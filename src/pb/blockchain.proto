syntax = 'proto3';

package blockchain;

// #BEGIN(blockchain)
// Blockchain Service Definition
service Blockchain {
	rpc GetBlock(HeightParam) returns (Block);
	rpc GetBlocks(BlocksParam) returns (BlockList);
	rpc GetBlockchainInfo(Empty) returns (Status);
	rpc GetChainId(Empty) returns (ChainId);
	rpc GetGenesis(Empty) returns (GenesisDoc);            			// NI - go
	rpc GetLatestBlock(Empty) returns (Block);
	rpc GetUnconfirmedTxs(Empty) returns (UnconfirmedTxList);
	rpc GetConsensusState(Empty) returns (ConsensusState); // WE NEED TO DISCUSS THIS ONE
}




// Params

message Empty {

}

message HeightParam {
	uint64 height = 1;
}

message BlocksParam {
	uint64 minHeight = 1;
	uint64 maxHeight = 2;
}

// Results
message Header {
	string ChainID       = 1;
	int64 Height         = 2;
	int64 Time           = 3;
	int64 NumTxs         = 4;
	bytes LastBlockID    = 5;
	bytes LastCommitHash = 6;
	bytes DataHash       = 7;
	bytes ValidatorsHash = 8;
	bytes AppHash        = 9;
}


message Data {
	repeated bytes Txs = 1;
	bytes hash = 2;
}

message Block {
	bytes   BlockID    = 1;
	Header  Header     = 2;
	Data    Data       = 3;
}


message BlockMeta {
	bytes   BlockID = 1;
	Header  Header  = 2;
}

message BlockList {
	uint64 LastHeight = 1;
	repeated BlockMeta BlockMetas = 2;
}

message ChainId {
	string ChainName  = 1;
	string ChainId    = 2;
	bytes GenesisHash = 3;
}


message GenesisDoc {
	message GenesisAccount {
		bytes Address   = 1;
		bytes PublicKey = 2;
		uint64 Amount   = 3;
		string Name     = 4;
		AccountPermissions Permissions = 5;
	}

 message AccountPermissions {
	BasePermissions Base  = 1;
	repeated string Roles = 2;
}

	message GenesisValidator {
		bytes Address   = 1;
		bytes PublicKey = 2;
		uint64 Amount   = 3;
		string Name     = 4;
		repeated bytes UnbondTo = 5;
	}
	uint64 GenesisTime       = 1;
	string ChainName         = 2;
	bytes Salt               = 3;
	uint64 GlobalPermissions = 4;
	repeated GenesisAccount   Accounts   = 5;
	repeated GenesisValidator Validators = 6;
}

message UnconfirmedTxList {
	uint64 NumTxs = 1;
	repeated bytes Txs = 2;
}

message Status {
	NodeInfo NodeInfo 		   = 1;
	bytes 	 GenesisHash	   = 2;
	bytes 	 PublicKey         = 3;
	bytes 	 LatestBlockHash   = 4;
	uint64 	 LatestBlockHeight = 5;
	int64 	 LatestBlockTime   = 6;
	string 	 NodeVersion 	   = 7;
}


// These are used for get consensus state. There is a lot of information that could be included
// We should decided what the minimum we want inccluded is.
message RoundState {
	int64 Height       = 1;
	int64 Round        = 2;
	int64 Step         = 3;
	uint64 StartTime   = 4;
	uint64 CommitTime  = 5;
/*	Validators         *types.ValidatorSet `json:"validators"`
	Proposal           *types.Proposal     `json:"proposal"`
	ProposalBlock      *types.Block        `json:"proposal_block"`
	ProposalBlockParts *types.PartSet      `json:"proposal_block_parts"`
	LockedRound        int                 `json:"locked_round"`
	LockedBlock        *types.Block        `json:"locked_block"`
	LockedBlockParts   *types.PartSet      `json:"locked_block_parts"`
	ValidRound         int                 `json:"valid_round"`       // Last known round with POL for non-nil valid block.
	ValidBlock         *types.Block        `json:"valid_block"`       // Last known block of POL mentioned above.
	ValidBlockParts    *types.PartSet      `json:"valid_block_parts"` // Last known block parts of POL metnioned above.
	Votes              *HeightVoteSet      `json:"votes"`
	CommitRound        int                 `json:"commit_round"` //
	LastCommit         *types.VoteSet      `json:"last_commit"`  // Last precommits at Height-1
	LastValidators     *types.ValidatorSet `json:"last_validators"`*/
}

message PeerRoundState {
	int64 Height             = 1;
	int64 Round              = 2;
	int64 Step               = 3;
	uint64 StartTime         = 4;
	bool Proposal            = 5;
/*
	ProposalBlockPartsHeader types.PartSetHeader `json:"proposal_block_parts_header"` //
	ProposalBlockParts       *cmn.BitArray       `json:"proposal_block_parts"`        //
	ProposalPOLRound         int                 `json:"proposal_pol_round"`          // Proposal's POL round. -1 if none.
	ProposalPOL              *cmn.BitArray       `json:"proposal_pol"`                // nil until ProposalPOLMessage received.
	Prevotes                 *cmn.BitArray       `json:"prevotes"`                    // All votes peer has for this round
	Precommits               *cmn.BitArray       `json:"precommits"`                  // All precommits peer has for this round
	LastCommitRound          int                 `json:"last_commit_round"`           // Round of commit for last height. -1 if none.
	LastCommit               *cmn.BitArray       `json:"last_commit"`                 // All commit precommits of commit for last height.
	CatchupCommitRound       int                 `json:"catchup_commit_round"`        // Round that we have commit for. Not necessarily unique. -1 if none.
	CatchupCommit            *cmn.BitArray       `json:"catchup_commit"`              // All commit precommits peer has for this height & CatchupCommitRound
*/
}

message ConsensusState {
	RoundState RoundState   = 1;
	repeated PeerRoundState PeerRoundStates = 2;
}


message BasePermissions {
	uint64 Perms = 1;
	uint64 SetBit = 2;
}

message NodeInfo {
	NodeID ID  			= 1;
	string ListenAddr  	= 2;
	string Network  	= 3;
	string Version 		= 4; 
	bytes  Channels  	= 5;
	string Moniker 		= 6;
	repeated string Other = 7;
}

message NodeID {
	string Name = 1;
	bytes  PublicKey = 2;
}