syntax = 'proto3';

package events;

// Event Service Definition
service Events {
    rpc EventPoll (SubIdParam) returns (PollResponse);
    rpc EventSubscribe (EventIdParam) returns (SubIdParam);
    rpc EventUnsubscribe (SubIdParam) returns (EventUnSub);
}

// Params
message EventIdParam {
    string eventId = 1;
}

message SubIdParam {
    string subId = 1;
}

// Results
message EventUnSub {
    bool result = 1;
}

message PollResponse {
    repeated Event events = 1;
}

message Event {
    string Name = 1;
    oneof Event {
        // Burrow's execution domain events generated deterministically from transactions
        ExecutionEvent ExecutionEvent = 2;
        // Operational events from tendermint serialised into their standard JSON representation
        string TendermintEventJSON = 3;
    }
}

//--------------------------------------------------
// Execution events
service ExecutionEvents {
    // GetEvents provides events streaming one block at a time - that is all events emitted in a particular block
    // are guaranteed to be delivered in each GetEventsResponse
    rpc GetEvents (GetEventsRequest) returns (stream GetEventsResponse);
}

message GetEventsRequest {
    BlockRange BlockRange = 1;
    // Specify a query on which to match the tags of events.
    // Tag        | Match type | Values
    // -----------------------------------------
    //   All events
    // -----------------------------------------
    // TxType       | String     | "UnknownTx", "SendTx", "CallTx", "NameTx", "BondTx", "UnbondTx", "PermissionsTx", "GovernanceTx"
    // TxHash       | String     | bytes
    // EventType    | String     | "CallEvent", "LogEvent", "AccountInputEvent", "AccountOutputEvent"
    // EventID      | String     | string
    // Height       | Integer    | uint64
    // Index        | Integer    | uint64
    // MessageType  | String     | Go type name
    // -----------------------------------------
    //   Log event
    // -----------------------------------------
    // Address      | String     | Address (hex)
    // Log<0-4>     | String     | Word256 (hex)
    // Log<0-4>Text | String     | string (trimmed)
    // -----------------------------------------
    //   Call event
    // -----------------------------------------
    // Origin       | String     | Address (hex)
    // Callee       | String     | Address (hex)
    // Caller       | String     | Address (hex)
    // Value        | Integer    | uint64
    // Gas          | Integer    | uint64
    // StackDepth   | Integer    | uint64
    // Exception    | String     | string
    // -----------------------------------------
    //   Tx event (input/output)
    // -----------------------------------------
    // Exception  | String     | string
    //
    // For example:
    // EventType = 'LogEvent' AND EventID CONTAINS 'bar' AND TxHash = '020304' AND Height >= 34 AND Index < 3 AND Address = 'DEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF'
    string Query = 2;
}

message GetEventsResponse {
    repeated ExecutionEvent events = 1;
}

message Bound {
    BoundType Type = 1;
    uint64 Index = 2;
    enum BoundType {
        // Index is absolute index of object in collection
        ABSOLUTE = 0;
        // Index is an offset relative to another bound determined by context
        RELATIVE = 1;
        // The first block
        FIRST = 2;
        // Ignore provided index and evaluate to latest index
        LATEST = 3;
        // Ignore provided index and stream new objects as they are generated
        STREAM = 4;
    }
}

// An inclusive range of blocks to include in output
message BlockRange {
    // Bounds can be set to:
    // absolute: block height
    // relative: block height counting back from latest
    // latest: latest block when call is processed
    // stream: for End keep sending new blocks, for start same as latest
    Bound Start = 1;
    Bound End = 2;
}

//--------------------------------------------------
// Event types

message EventHeader {
    // Transaction type
    string TxType = 1;
    // The hash of the transaction that caused this event to be generated
    bytes TxHash = 2;
    // The type of event
    string EventType = 3;
    // EventID published with event
    string EventID = 4;
    // The block height at which this event was emitted
    uint64 Height = 5;
    // The index amongst all other events in the block of this event
    uint64 Index = 6;
}

message ExecutionEvent {
    EventHeader Header = 1;
    oneof EventData {
        EventDataTx EventDataTx = 2;
        EventDataCall EventDataCall = 3;
        EventDataLog EventDataLog = 4;
    }
}

message EventDataLog {
    bytes Address = 1;
    bytes Data = 2;
    repeated bytes Topics = 3;
}

message EventDataTx {
    bytes Return = 1;
    //errors.Exception Exception = 2;
}

message EventDataCall {
    CallData CallData = 1;
    bytes Origin = 2;
    uint64 StackDepth = 3;
    bytes Return = 4;
   // errors.Exception Exception = 5;
}

message CallData {
    bytes Caller = 1;
    bytes Callee = 2;
    bytes Data = 3;
    uint64 Value = 4;
    uint64 Gas = 5;
}
