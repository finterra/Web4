syntax = 'proto3';

// Params
message CallParam {
    bytes from = 1;
    bytes address = 2;
    bytes data = 3;
}

message CallCodeParam {
    bytes from = 1;
    bytes code = 2;
    bytes data = 3;
}

message TransactParam {
    // The input account to sign with
    InputAccount inputAccount = 1;
    // The address of the contract to call, or omitted if creating a new contract
    bytes address = 2;
    // EVM bytecode payload to deliver
    bytes data = 3;
    // The maximum gas to provide to the EVM when running any code - provided in order to bound the computation time
    uint64 gasLimit = 4;
    // Value to transfer, where amount = value + fee
    uint64 value = 5;
    // Fee to offer validators for processing transaction
    uint64 fee = 6;
}

message SendParam {
    InputAccount inputAccount = 1;
    bytes toAddress = 2;
    uint64 amount = 3;
}

message InputAccount {
    bytes privateKey = 1;
    bytes address = 2;
}

message TxParam {
    bytes tx = 1;
}

message SignTxParam {
    bytes tx = 1;
    repeated PrivateAccount privateAccounts = 2;
}

// // Results
message SignedTx {
    bytes tx = 1;
}

message CallResult {
    bytes Return = 1;
    uint64 GasUsed = 2;
}

message TxReceipt {
    bytes TxHash = 1;
    bool CreatesContract = 2;
    bytes ContractAddress = 3;
}

message PrivateAccount {
    bytes PrivateKey = 1;
}

message EventDataCall {
    CallData CallData = 1;
    bytes Origin = 2;
    uint64 StackDepth = 3;
    bytes Return = 4;
   // errors.Exception Exception = 5;
}

message CallData {
    bytes Caller = 1;
    bytes Callee = 2;
    bytes Data = 3;
    uint64 Value = 4;
    uint64 Gas = 5;
}


// Transaction Service Definition
service Transactor {
    // Broadcast a signed and serialised transaction to the mempool
    rpc BroadcastTx(stream TxParam) returns (stream TxReceipt);
    // // Perform a 'simulated' call of a contract against the current committed EVM state without any changes been saved
    rpc Call(CallParam) returns (CallResult);
    // // // Perform a 'simulated' execution of provided code against the current committed EVM state without any changes been saved
    rpc CallCode(CallCodeParam) returns (CallResult);
    // // // Formulate a CallTx transaction signed server-side
     rpc Transact(TransactParam) returns (TxReceipt);
    // // Formulate a CallTx transaction signed server-side and wait for it to be included in a block, retrieving response
     rpc TransactAndHold(TransactParam) returns (EventDataCall);
     // // // Formulate a SendTx transaction signed server-side
     rpc Send(SendParam) returns (TxReceipt);
     // // // Formulate a SendTx transaction signed server-side and wait for it to be included in a block, retrieving response
     rpc SendAndHold(SendParam) returns (TxReceipt);
     // // // Sign a transaction server-side
     rpc SignTx(SignTxParam) returns (SignedTx);
}


